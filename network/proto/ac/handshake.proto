syntax = "proto2";
package ac;

// Join process:
// 1. Client: BASIC or FULL ServerInfoRequest
// 2. Server: ServerInfoResponse with auth_challenge.
// 3. Client: JoinRequest with calculated auth_response
// 4. Server: JoinResponse

message ServerInfoRequest {
	enum Verbosity {
		// Server only responds with a fixed message.
		PING = 0;
		// Server responds with ServerInfoResponse.
		BASIC = 1;
		// Server responds with ExtendedServerInfoResponse.
		FULL = 2;
	}
	required Verbosity verbosity = 1;
}

enum Protection {
	// No password is needed to join a room.
	OPEN = 0;
	// Joining the server itself requires a password.
	JOIN_WITH_PASSWORD = 1;
	// Joining the server is possible, but only spectating
	// is open. (Password may be needed to join a room.)
	SPECTATE_ONLY = 2;
	// Server is enforcing a whitelist.
	WHITELIST = 3;
	// Server is not open to any new players or spectators.
	CLOSED = 4;
}

message ServerInfoResponse {
	required string name = 1;
	required string address = 2;
	required uint32 port = 3;
	required uint32 players = 4;
	required uint32 players_max = 5;
	required Protection protection = 6;
	// Required.
	required bytes auth_challenge = 7;
}

message ExtendedServerInfoResponse {
	required ServerInfoResponse header = 1;
	required string description = 2;
	repeated ServerInfoPlayer player_list = 3;
}

message ServerInfoPlayer {
	required string name = 1;
	required string character_name = 2;
	required uint32 join_time = 3;
}

message JoinRequest {
	required string player_name = 1;
	// This response is required!
	// OPEN: bcrypt(auth_challenge + GAME_ID) (prevents replay attacks)
	// JOIN_WITH_PASSWORD: bcrypt(auth_challenge + GAME_ID + password)
	required bytes auth_response = 2;
	required string player_id = 3;
}

message JoinResponse {
	enum Result {
		SUCCESS = 0;
		SERVER_FULL = 1;
		BAD_PASSWORD = 2;
		INVALID_REQUEST = 3;
	}
	required Result result = 1;
	optional string info = 2;
}
